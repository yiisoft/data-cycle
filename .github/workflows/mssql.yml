on:
  pull_request:
    paths:
      - 'src/**'
      - 'tests/**'
      - '.github/workflows/mssql.yml'
      - 'composer.json'
      - 'phpunit.xml.dist'

  push:
    branches: ['master']
    paths:
      - 'src/**'
      - 'tests/**'
      - '.github/workflows/mssql.yml'
      - 'composer.json'
      - 'phpunit.xml.dist'

name: mssql

jobs:
  tests:
    name: PHP ${{ matrix.php }}-mssql-${{ matrix.mssql.server }}

    env:
      extensions: pdo, pdo_sqlsrv

    runs-on: ${{ matrix.mssql.os || 'ubuntu-latest' }}

    strategy:
      matrix:
        php:
          - 8.3
          - 8.4

        mssql:
          - server: 2022-latest
            odbc-version: 18
            flag: "-C"

        include:
          - php: 8.3
            mssql:
              server: 2017-latest
              os: ubuntu-20.04
              odbc-version: ""
              flag: ""
          - php: 8.3
            mssql:
              server: 2019-latest
              odbc-version: 18
              flag: "-C"

    services:
      mssql:
        image: mcr.microsoft.com/mssql/server:${{ matrix.mssql.server }}
        env:
          SA_PASSWORD: YourStrong!Passw0rd
          ACCEPT_EULA: Y
          MSSQL_PID: Developer
        ports:
          - 1433:1433
        options: >-
          --name=mssql
          --health-cmd="bash -c 'if [ -x /opt/mssql-tools${{ matrix.mssql.odbc-version }}/bin/sqlcmd ]; then /opt/mssql-tools${{ matrix.mssql.odbc-version }}/bin/sqlcmd ${{ matrix.mssql.flag }} -S localhost -U SA -P ''YourStrong!Passw0rd'' -Q ''SELECT 1''; elif [ -x /opt/mssql-tools/bin/sqlcmd ]; then /opt/mssql-tools/bin/sqlcmd ${{ matrix.mssql.flag }} -S localhost -U SA -P ''YourStrong!Passw0rd'' -Q ''SELECT 1''; else exit 1; fi'"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
      - name: Install ODBC driver
        run: |
          sudo curl https://packages.microsoft.com/config/ubuntu/$(lsb_release -rs)/prod.list | sudo tee /etc/apt/sources.list.d/mssql-release.list
          sudo ACCEPT_EULA=Y apt-get install -y msodbcsql18

      - name: Checkout
        uses: actions/checkout@v3

      - name: Wait for SQL Server to be ready
        run: |
          for i in {1..30}; do
            if docker exec -i mssql bash -c 'if [ -x /opt/mssql-tools${{ matrix.mssql.odbc-version }}/bin/sqlcmd ]; then /opt/mssql-tools${{ matrix.mssql.odbc-version }}/bin/sqlcmd ${{ matrix.mssql.flag }} -S localhost -U SA -P "YourStrong!Passw0rd" -Q "SELECT 1"; elif [ -x /opt/mssql-tools/bin/sqlcmd ]; then /opt/mssql-tools/bin/sqlcmd ${{ matrix.mssql.flag }} -S localhost -U SA -P "YourStrong!Passw0rd" -Q "SELECT 1"; else exit 1; fi'; then
              echo "SQL Server is up!"
              exit 0
            fi
            echo "Waiting for SQL Server..."
            sleep 5
          done
          echo "SQL Server did not start in time."
          exit 1

      - name: Create MS SQL Database
        run: |
          if docker exec mssql bash -c 'if [ -x /opt/mssql-tools${{ matrix.mssql.odbc-version }}/bin/sqlcmd ]; then /opt/mssql-tools${{ matrix.mssql.odbc-version }}/bin/sqlcmd ${{ matrix.mssql.flag }} -S localhost -U SA -P "YourStrong!Passw0rd" -Q "CREATE DATABASE yiitest"; elif [ -x /opt/mssql-tools/bin/sqlcmd ]; then /opt/mssql-tools/bin/sqlcmd ${{ matrix.mssql.flag }} -S localhost -U SA -P "YourStrong!Passw0rd" -Q "CREATE DATABASE yiitest"; else exit 1; fi'; then
            echo "Database created."
          else
            echo "Database creation failed."
            exit 1
          fi

      - name: Install PHP with extensions
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php }}
          extensions: ${{ env.extensions }}
          ini-values: date.timezone='UTC'
          coverage: pcov
          tools: composer:v2, pecl

      - name: Determine composer cache directory
        run: echo "COMPOSER_CACHE_DIR=$(composer config cache-dir)" >> $GITHUB_ENV

      - name: Cache dependencies installed with composer
        uses: actions/cache@v4
        with:
          path: ${{ env.COMPOSER_CACHE_DIR }}
          key: php${{ matrix.php }}-composer-${{ hashFiles('**/composer.json') }}
          restore-keys: |
            php${{ matrix.php }}-composer-

      - name: Update composer
        run: composer self-update

      - name: Install dependencies with composer
        run: composer update --prefer-dist --no-interaction --no-progress --optimize-autoloader --ansi

      - name: Run tests with phpunit
        run: vendor/bin/phpunit --testsuite=Mssql --coverage-clover=coverage.xml --colors=always
        env:
          ENVIRONMENT: ci
          CYCLE_MSSQL_DATABASE: yiitest
          CYCLE_MSSQL_HOST: 127.0.0.1
          CYCLE_MSSQL_PORT: 1433
          CYCLE_MSSQL_USER: SA
          CYCLE_MSSQL_PASSWORD: YourStrong!Passw0rd

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage.xml